diff --git a/src/core/main.c b/src/core/main.c
index aef75f5a..a2d623bf 100644
--- a/src/core/main.c
+++ b/src/core/main.c
@@ -3,6 +3,38 @@
 #include <emscripten.h>
 #include <stdbool.h>
 
+/* PyQt initializion functions */
+extern PyObject *PyInit_sip();
+extern PyObject *PyInit_Qt();
+extern PyObject *PyInit_QtCore();
+extern PyObject *PyInit_QtGui();
+extern PyObject *PyInit_QtWidgets();
+extern PyObject *PyInit_QtSvg();
+
+void execLastQApp();  // Start QTs main loop
+
+// Wrapper modules
+
+static PyMethodDef PyQt5Methods[] = {
+    {NULL, NULL, 0, NULL}
+};
+
+static struct PyModuleDef PyQt5 = {
+    PyModuleDef_HEAD_INIT,
+    "PyQt5",
+    0,
+    -1,
+    PyQt5Methods
+};
+
+PyMODINIT_FUNC PyInit_PyQt5(void)
+{
+    printf("in PyInit\r\n");
+    PyObject *mod = PyModule_Create(&PyQt5);
+    PyModule_AddObject(mod, "__path__", Py_BuildValue("()"));
+    return mod;
+}
+
 #define FAIL_IF_STATUS_EXCEPTION(status)                                       \
   if (PyStatus_Exception(status)) {                                            \
     goto finally;                                                              \
@@ -30,6 +62,15 @@ initialize_python(int argc, char** argv)
   status = PyConfig_SetBytesString(&config, &config.home, "/");
   FAIL_IF_STATUS_EXCEPTION(status);
 
+  // Register PyQT modules to Python
+  PyImport_AppendInittab("PyQt5", PyInit_PyQt5);
+  PyImport_AppendInittab("PyQt5.sip", PyInit_sip);
+  PyImport_AppendInittab("PyQt5.Qt", PyInit_QtCore);
+  PyImport_AppendInittab("PyQt5.QtCore", PyInit_QtCore);
+  PyImport_AppendInittab("PyQt5.QtGui", PyInit_QtGui);
+  PyImport_AppendInittab("PyQt5.QtWidgets", PyInit_QtWidgets);
+  PyImport_AppendInittab("PyQt5.QtSvg", PyInit_QtSvg);
+
   config.write_bytecode = false;
   status = Py_InitializeFromConfig(&config);
   FAIL_IF_STATUS_EXCEPTION(status);
@@ -41,6 +82,23 @@ finally:
     // This will exit().
     Py_ExitStatusException(status);
   }
+
+  // Fix import system to accomendate the shallow PyQt5 mock module
+  // Thanks to dgym @ https://stackoverflow.com/questions/39250524/programmatically-define-a-package-structure-in-embedded-python-3
+  PyRun_SimpleString(
+        "from importlib import abc, machinery \n" \
+        "import sys\n" \
+        "\n" \
+        "class Finder(abc.MetaPathFinder):\n" \
+        "    def find_spec(self, fullname, path, target=None):\n" \
+        "        if fullname in sys.builtin_module_names:\n" \
+        "            return machinery.ModuleSpec(fullname, machinery.BuiltinImporter)\n" \
+        "\n" \
+        "sys.meta_path.append(Finder())\n" \
+  );
+
+  // Create our QApplication inside Python
+  PyRun_SimpleString("from PyQt5.QtWidgets import QApplication\nqtApp = QApplication([\"pyodide\"])\n");
 }
 
 PyObject*
@@ -63,6 +121,9 @@ main(int argc, char** argv)
   // no status code to check.
   PyImport_AppendInittab("_pyodide_core", PyInit__pyodide_core);
   initialize_python(argc, argv);
+  
+  execLastQApp();
+
   emscripten_exit_with_live_runtime();
   return 0;
 }
